uses data.String

component 
  provides 
    serverctl.Serverctl 
  requires 
    io.Output out,
    net.http.HTTPRequest httpreq,
    data.json.JSONEncoder jsonEncoder,
    data.json.JSONParser parser,
    data.IntUtil iu
{
  const char baseUrl[] = "http://serverctl:5000" 

  HTTPResponse responseData = new HTTPResponse()

  String[] Serverctl:get_service_names(){
    responseData = httpreq.get(new char[](baseUrl, "/pods"))
    out.println("$(responseData.responseCode)")
    out.println("$(responseData.content)")
    return jsonEncoder.jsonToArray(responseData.content, typeof(String[]), null)
  }

  int Serverctl:get_quantity(){
    responseData = httpreq.get(new char[](baseUrl, "/pods/quantity"))
    return iu.intFromString(responseData.content)
  }

  int Serverctl:get_final(){
    responseData = httpreq.get(new char[](baseUrl, "/names/final"))
    return iu.intFromString(responseData.content) 
  }

  void Serverctl:create_pods(int quantity){
   Header header = new Header()
   header.key = "Content-Type"
   header.value = "application/json"
   Service s = new Service()
   s.name = "remotedist"
   s.quantity = quantity
   char encoded[] = jsonEncoder.jsonFromData(s, null)
   responseData = httpreq.post((new char[](baseUrl, "/pods/new")), header, encoded)
   out.println("$(responseData.responseCode)")
  }

  void Serverctl:delete_pods() {
   Header header = new Header()
   header.key = "Content-Type"
   header.value = "application/json"
   responseData = httpreq.post((new char[](baseUrl, "/pods/delete")), header, null)
   out.println("$(responseData.responseCode)")
  }
}
