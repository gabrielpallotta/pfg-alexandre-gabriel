data Param {
	char value[]
}

data Request {
	char functionName[]
	int numParams
	Param params[]
}

data Response {
	// 1 OK - 2 FAILED
	byte status
	// if it's null or "" this has to be translated to null
	char value[]
}

data Int {
	int i
}

const char IS_PRIME[] = "isPrime"
const char GET_USERS[] = "getUsers"

component provides proxy.DistProxy requires io.Output out, data.IntUtil iu, net.TCPSocket,
	net.TCPServerSocket, prime.Prime prime, users.Users users, data.json.JSONEncoder parser, data.StringUtil strUtil  {

	bool serviceStatus
	TCPServerSocket host

	Response isPrimeRequest(Request request) {
		Response response = new Response()

		int num = iu.intFromString(request.params[0].value)
		int start = iu.intFromString(request.params[1].value)
		int end = iu.intFromString(request.params[2].value)

		out.println("Received isPrime request: $(num) $(start) $(end)")

		response.status = 3

		if (prime.isPrime(num, start, end)) {
			response.value = "PRIME"
		} else {
			response.value = "NOT PRIME"
		}

		out.println("Responding with $(response.value)")

		
		return response
	}

	Response getUsers(Request request) {
		Response response = new Response()

		out.println("Received getUsers request")

		response.status = 3
		response.value = users.getUsers(request.params[0].value)

		return response
	}

	Response interpretRequest(Request request) {
		out.println("Interpreting request: $(request.functionName)")

		if (request.functionName == IS_PRIME) {
			return isPrimeRequest(request)
		} else if (request.functionName == GET_USERS) {
			return getUsers(request)
		} else {
			out.println("Received unknown request")
			Response response = new Response()
			response.status = 2
			response.value = ""
			return response
		}
	}

	Request parseRequest(char content[]) {
		out.println("Received content: $(content)")
		String helper[] = strUtil.explode(content, "!")
		Request request = parser.jsonToData(helper[0].string, typeof(Request), null)
		Request newRequest = new Request()
		newRequest.numParams = request.numParams
		newRequest.functionName = request.functionName
		newRequest.params = new Param[newRequest.numParams]()
		for (int i = 0; i < newRequest.numParams; i++) {
			newRequest.params[i] = new Param()
			newRequest.params[i].value = helper[i+1].string
		}
		return newRequest
	}

	Request readRequest(TCPSocket s) {
		Request request = null
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = s.recv(1)).arrayLength > 0) {
			command = new char[](command, buf)
			len++
			//stop condition
			if (len >= 4) {
				if ((command[len-4] == "\r") && (command[len-3] == "\r") &&
					(command[len-2] == "\r") && (command[len-1] == "\r")) {
					request = parseRequest(strUtil.subString(command,
							0, command.arrayLength-4))
					break
				}
			}
		}
		if (request == null) { s.disconnect() }
		return request
	}

	void processRequest(TCPSocket s) {
		Response response = new Response()
		Request request = readRequest(s)
		char content[]
		if (request == null) {
			response.status = 2
			response.value = null
		} else {
			response = interpretRequest(request)
		}
		if (response.status == 3) {
			response.status = 2
			char value[] = response.value
			response.value = ""
			content = new char[](parser.jsonFromData(response,null), "!", value, "\r\r\r\r")
		} else {
			content = new char[](parser.jsonFromData(response,null), "\r\r\r\r")
		}
		s.send(content)
		s.disconnect()
	}

	void DistProxy:start(int port) {
		out.println("Starting DistProxy")
		serviceStatus = true
		host = new TCPServerSocket()
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, port)) {
			out.println("Error: failed to bind master socket")
			return
		}
		while (serviceStatus) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) {
				asynch::processRequest(client)
			}
		}
	}
}
